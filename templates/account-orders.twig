{% extends "layout.twig" %}

{% block header %} {{ include('header.twig') }} {% endblock %}

{% block top_links %}
    <link rel="stylesheet" href="{{ asset_url ~ 'profile-style.css?v=1.03' }}">
    <link rel="stylesheet" type="text/css" href="{{ asset_url ~ 'account-pages.css?v=1.57' }}" />
{% endblock %}

{% block main_content %}

   {# bread crumbs #}

     {% embed 'breadcrumb.twig' %}
        {% block breadcrumb_items %}
            <li class="breadcrumb-item" aria-current="page"><a href="/">{{ locals.home_title }}</a></li>
               {% if session.lang.code == 'ar' %}
                <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" >
                <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                </svg>
               {% else %}
                <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" class="rotateIcon">
                <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                </svg>
               {% endif %}
            <li class="breadcrumb-item active " aria-current="page">{{ locals.profile.myOrders }}</li>
        {% endblock %}
    {% endembed %}

   {# small hero section #}
   {# {% include 'smallHero.twig' with { 'title' :  locals.profile.myOrders } %} #}

   <div class="container orders-page">
     {# create order info #}
     {% include 'orders-info.twig'  %}
    <div  id="loadingIndicator" class="text-center d-flex justify-content-center align-items-center w-100">
            
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"width="66" height="66" style="shape-rendering: auto; background: rgb(255, 255, 255);" xmlns:xlink="http://www.w3.org/1999/xlink"><g><circle stroke-dasharray="164.93361431346415 56.97787143782138" r="35" stroke-width="10" stroke="#a9a490" fill="none" cy="50" cx="50">
        <animateTransform keyTimes="0;1" values="0 50 50;360 50 50" dur="1s" repeatCount="indefinite" type="rotate" attributeName="transform"></animateTransform>
        </circle><g></g></g><!-- [ldio] generated by https://loading.io --></svg>
    </div>
    
     <div class="containerOfData" id="containerOfData" style="display:none">
            {# create Tabs #}
            <div class="orders-tabs boder mb-5 p-3 d-flex flex-column flex-md-row justify-content-center gap-3">
                <div class="tab justify-content-start justify-content-md-center d-flex gap-2">
                <div class="num-box">


                </div>
                </div>
            </div>

            {# rendered orders #}
            <div class="rendered-orders radius30 d-flex flex-column gap-4 mb-5">
            <div class="header-orders  d-flex justify-content-between gap-2 p-5">
                <div class="d-flex flex-column flex-md-row gap-3 align-items-start align-items-md-center">
                  <div class="order-icon d-flex justify-content-center align-items-center">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2 6.16667V17.1667C2 17.5704 2.24274 17.9345 2.61538 18.0897L12 22M2 6.16667L11.2308 2.32051C11.7231 2.11538 12.2769 2.11538 12.7692 2.32051L17 4.08333M2 6.16667L7 8.25M12 10.3333V22M12 10.3333L22 6.16667M12 10.3333L7 8.25M12 22L21.3846 18.0897C21.7573 17.9345 22 17.5704 22 17.1667V6.16667M22 6.16667L17 4.08333M7 8.25L17 4.08333" stroke="white" stroke-width="1.5" stroke-linejoin="round"/>
                        </svg>
                  </div>
                  <h4 class="title"></h4>
                </div>
                <select class="cursor-pointer select-box align-self-end"></select>
            </div>
            <div class="container">
                <div class="row body-orders g-3">
                
                </div>
            </div>
            <div class="container-pagination d-flex justify-content-center align-items-center gap-3 my-3">  
                    <div class="prev-btn cursor-pointer {% if session.lang.code == 'en' %}rotateIcon{% else %}''{% endif %} ">
                        <svg width="8" height="10" viewBox="0 0 8 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1.3999 1C1.3999 1 6.1999 3.75655 6.1999 5.00115C6.1999 6.24575 1.3999 9 1.3999 9" stroke="#1E293B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div> 
                    <ul class="pagination-orders d-flex gap-3 flex-wrap justify-content-center ">
                    
                    </ul>
                    <div class="next-btn cursor-pointer {% if session.lang.code == 'en' %}rotateIcon{% else %}''{% endif %} ">
                        <svg width="8" height="10" viewBox="0 0 8 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6.6001 1C6.6001 1 1.8001 3.75655 1.8001 5.00115C1.8001 6.24575 6.6001 9 6.6001 9" stroke="#1E293B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </div> 
            </div>
            </div>

     </div>

   </div>


{% endblock %}

{% block footer_scripts %}

  <script>
  
  let orders = [],
  ordersFromRequest=[],
  tabs = [],
  activeTab = '',
  currentPage = 1,
  ordersPerPage= 2;

    // this fetch Data   
    const loadingIndicatorT = document.getElementById('loadingIndicator');
    const containerOfData = document.getElementById('containerOfData');
    async function fetchOreders(){
        try {
            const response = await zid.store.customer.fetchOrders();
            const tempOrders =  response.data.orders;
            ordersFromRequest= tempOrders;
            createOrdersInfo(tempOrders);
            createOrdersTabs(tempOrders);
        } catch (error) {
          console.error('Error fetching data:', error);
        } finally {
            loadingIndicatorT.classList.add('d-none');
            containerOfData.style.display = 'block';
        }
        
    }


    // function createOrdersInfo
    function createOrdersInfo(temp_orders){
        
        const orderText = "{{ locals.orders.order }}";
        const ordersText = "{{ locals.orders.more_orders }}";

        let totalOrders = temp_orders.length,
        currentOrders = 0,
        oldOrders  = 0,
        canseledOrders = 0; 
        temp_orders.forEach(order => {

          // current orders   
          if(order.order_status.code === 'new') currentOrders += 1;
          if(order.order_status.code === 'preparing') currentOrders += 1;
          if(order.order_status.code === 'ready') currentOrders += 1;
          if(order.order_status.code === 'indelivery') currentOrders += 1;

          // old orders   
          if(order.order_status.code === 'delivered') oldOrders += 1;
          if(order.order_status.code === 'reversed') oldOrders += 1;
          if(order.order_status.code === 'reverse_in_progress') oldOrders += 1;

          // canseled orders
          if(order.order_status.code === 'cancelled') canseledOrders += 1;

   
        });
          document.querySelector('.orders-page .orders-info .totalOrders .number').textContent = `${totalOrders} ${totalOrders < 10 ? orderText:ordersText}`;
          document.querySelector('.orders-page .orders-info .currentOrders .number').textContent = `${currentOrders} ${currentOrders < 10 ? orderText: ordersText}`;
          document.querySelector('.orders-page .orders-info .oldOrders .number').textContent = `${oldOrders} ${oldOrders < 10 ? orderText: ordersText}`;

         tabs = [
            {code:"current",text:"{{ locals.orders.current_orders }}",number:currentOrders},
            {code:"old",text:"{{ locals.orders.old_orders }}",number:oldOrders},
            {code:"cansel",text:"{{ locals.orders.uncompleted_orders }}",number:canseledOrders}];
         activeTab = "current";

        createOrdersTabs();
        
        
    }
 
    // this function create tabs   
    function createOrdersTabs(){


      let tempTabs = '';
      tabs.forEach(tab =>{
        tempTabs += `
        <div class="tab radius30 cursor-pointer d-flex gap-2 px-3 ${activeTab === tab.code ? "activeTab":""}" data-activeTab="${tab.code}" >
           <div class="num-box ${activeTab === tab.code ? "active":""}">${tab.number}</div>
           <div class="text">${tab.text}</div>
        </div>`;
        
       });
      document.querySelector('.orders-page .orders-tabs').innerHTML = tempTabs;
        document.querySelectorAll('.orders-page .orders-tabs .tab').forEach(tab => {
            tab.addEventListener('click', function() {
                activeTab = this.getAttribute('data-activeTab');
                createOrdersTabs(); // Call createOrdersTabs again to regenerate tabs with updated activeTab
            });
        });
      reCreationOrdersContainer();
    }
      
 
  

    // this function create orders and pagiantions
    const currentSelect =  [{text:"{{ locals.profile.new }}",code:"new"},{text:"{{ locals.profile.preparing }}",code:"preparing"},{text:"{{ locals.profile.ready }}",code:"ready"},{text:"{{ locals.profile.indelivery }}",code:"indelivery"}];
    const oldSelect =  [{text:"{{ locals.profile.delivered }}",code:"delivered"},{text:"{{ locals.profile.reversed }}",code:"reversed"},{text:"{{ locals.profile.reverse_in_progress }}",code:"reverse_in_progress"}];
    const canselSelect =  [{text:"{{ locals.profile.cancelled }}",code:"cancelled"}];
    function reCreationOrdersContainer(){
        const textHeaderOrders = activeTab === "current"? "{{ locals.orders.current_orders }}" : activeTab === "old" ?"{{ locals.orders.old_orders }}" :"{{ locals.orders.uncompleted_orders }}";
        const renderedSelect =  activeTab === "current" ? currentSelect: activeTab === "old" ? oldSelect : canselSelect;

        document.querySelector('.orders-page .rendered-orders .header-orders .title').textContent = textHeaderOrders;
        
        let select = "",
        activeStatus = 'all';
        
        select += `<option value='all'>{{ locals.profile.all }}</option>`;
        renderedSelect.forEach(item => {
            select += `<option value="${item.code}">${item.text}</option>`;
        });

        showOrdersDependOnActiveStatusAndActiveTab(activeStatus);      
        document.querySelector('.orders-page .rendered-orders .header-orders .select-box').innerHTML = select;
        document.querySelector('.orders-page .rendered-orders .header-orders .select-box').value = activeStatus;
        document.querySelector('.orders-page .rendered-orders .header-orders .select-box').addEventListener('change', function() {
            activeStatus = this.value;
            showOrdersDependOnActiveStatusAndActiveTab(activeStatus);      
        });

    }
  

    function showOrdersDependOnActiveStatusAndActiveTab(myActiveStatus) {
        currentPage = 1;
        if(activeTab == "current"){
            const filteredOrders = ordersFromRequest.filter((order)=>{
                 if(myActiveStatus === 'all'){
                     return order.order_status.code === 'new' || order.order_status.code === 'preparing' || order.order_status.code ==='ready' || order.order_status.code === 'indelivery';
                 }else{
                     return order.order_status.code === myActiveStatus;
                 }
            })
            orders = filteredOrders;
            renderOrders();
        }else if(activeTab == "old"){
            const filteredOrders = ordersFromRequest.filter((order)=>{
                 if(myActiveStatus === 'all'){
                     return order.order_status.code === 'delivered' || order.order_status.code ==='reversed' || order.order_status.code ==='reverse_in_progress';
                 }else{
                     return order.order_status.code === myActiveStatus;
                 }
            });
           orders = filteredOrders;
           renderOrders();

        }
        else if(activeTab == "cansel"){
            const filteredOrders = ordersFromRequest.filter((order)=>{
                 if(myActiveStatus === 'all'){
                     return order.order_status.code === 'cancelled';
                 }else{
                     return order.order_status.code === myActiveStatus;
                 }
            })
          orders = filteredOrders;
          renderOrders();

        }   
        if(orders.length === 0){
            document.querySelector('.orders-page .rendered-orders .body-orders').innerHTML = `<h2 class="no-orders text-center my-4">لا يوجد طلبات</h2>`;
        }
    }

    // this function Render Orders
    function renderOrders(){
        let showOreders = '';
        const orderNum = "{{ locals.profile.order_number }}";
        const orderPaid = "{{ locals.orders.order_paid }}";
        const orderPending = "{{ locals.orders.order_pending }}";

       // Get current posts
        const indexOfLastOrder = currentPage * ordersPerPage;
        const indexOfFirstPost = indexOfLastOrder - ordersPerPage;
        const currentOrders = orders.slice(indexOfFirstPost, indexOfLastOrder);
        

        currentOrders.forEach(function(order){
          showOreders += `<div class="col-12 col-md-4">
                                <a class="order d-flex flex-column gap-3 border p-4" href="${order.order_url}">
                                    <div class="d-flex justify-content-between align-items-center">
                                    <h4 class="order-id">${orderNum} ${order.id}</h4>
                                    <div class="d-flex align-items-center gap-1">
                                    <img src="{{ asset_url ~ "Calendar.svg" }}" alt="DateIcon">
                                        <div class="d-flex align-items-center gap-2 date">
                                        ${order.created_at.split(" ")[0]} | ${order.created_at.split(" ")[1]}             
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center gap-1">
                                    <span class="order-status">
                                      {% if session.lang.ar %} 
                                            ${order.order_status.name}
                                        {% else %}
                                            ${order.order_status.code == 'new' ? '{{ locals.profile.new }}' : ''}
                                            ${order.order_status.code == 'cancelled' ? '{{ locals.profile.cancelled }}' : ''}
                                            ${order.order_status.code == 'reversed' ? '{{ locals.profile.reversed }}' : ''}
                                            ${order.order_status.code == 'reverse_in_progress' ? '{{ locals.profile.reverse_in_progress }}' : ''}
                                            ${order.order_status.code == 'preparing' ? '{{ locals.profile.preparing }}' : ''} 
                                            ${order.order_status.code == 'ready' ? '{{ locals.profile.ready }}' : ''} 
                                            ${order.order_status.code == 'indelivery' ? '{{ locals.profile.indelivery }}' : ''} 
                                            ${order.order_status.code == 'delivered' ? '{{ locals.profile.delivered }}' : ''} 
                                    {% endif %} 
                                    </span>
                                    <span class="order-payment">${order.payment_status === 'paid' ? orderPaid : order.payment_status === 'pending' ?orderPending :''}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center gap-3">
                                    <div class="d-flex flex-column gap-2">
                                        <span class="total-string">{{ locals.profile.order_total }}</span>
                                        <span class="price">${order.order_total_string}</span>
                                    </div>
                                    {% if session.lang.code == 'ar' %} 
                                      <img src="{{ asset_url ~ "arrowLeft.svg" }}" alt="arrowLeft">
                                    {% else %}
                                                    <svg width="10" height="14" viewBox="0 0 10 14" fill="none" xmlns="http://www.w3.org/2000/svg" class="rotateIcon">
                                                    <path d="M8.40002 1C8.40002 1 1.20003 5.13483 1.20003 7.00173C1.20002 8.86863 8.40002 13 8.40002 13" stroke="#334155" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                    </svg>
                                    {% endif %} 

                                </div>
                            </a>
                    </div>`;
        });
        document.querySelector('.orders-page .rendered-orders .body-orders').innerHTML = showOreders;  
        renderPagiantions();                   
    }

    // this function render Pagiantions
    let pageNumbers = [];
    function renderPagiantions(){
            const totalOrdersPagiantion = orders.length;
             pageNumbers = [];

            for (let i = 1; i <= Math.ceil(totalOrdersPagiantion / ordersPerPage); i++) {
                pageNumbers.push(i);
            }
            if(pageNumbers.length <= 1){
                document.querySelector('.orders-page .rendered-orders .pagination-orders').innerHTML = '';
                 document.querySelector(".orders-page .rendered-orders .next-btn").style.display = 'none';
                 document.querySelector(".orders-page .rendered-orders .prev-btn").style.display = 'none';
                return;
            }else{
                      document.querySelector(".orders-page .rendered-orders .next-btn").style.display = 'flex';
                 document.querySelector(".orders-page .rendered-orders .prev-btn").style.display = 'flex';  
            }
            let pagination = '';
            pageNumbers.forEach(number => {
                pagination += `<li class="cursor-pointer page-item ${currentPage === number? 'activePagination' : ''}" data-page="${number}">${number}</li>`;
            });

            document.querySelector('.orders-page .rendered-orders .pagination-orders').innerHTML = pagination;
            document.querySelectorAll('.orders-page .rendered-orders .pagination-orders .page-item').forEach(page => {
                page.addEventListener('click', function() {
                    document.querySelectorAll('.orders-page .rendered-orders .pagination-orders .page-item').forEach(item => {
                        item.classList.remove('activePagination');
                    });

                    this.classList.add('activePagination');

                    // Update currentPage
                    currentPage = parseInt(this.getAttribute('data-page'));
                    renderOrders();
                });      
            }); 
                    
      }
    // Bind event listener for next button
    document.querySelector(".orders-page .rendered-orders .next-btn").addEventListener('click', function(e) {
        if (currentPage < pageNumbers.length) {
            currentPage++; 
            renderOrders();
        } else {
            currentPage = 1; 
            renderOrders();
        }
    });
    document.querySelector(".orders-page .rendered-orders .prev-btn").addEventListener('click', function(e) {
        if (currentPage <= 1) {
          return;
        } else {
            currentPage--;
            renderOrders();
        }
    });

document.addEventListener("DOMContentLoaded", ()=>{
        fetchOreders();
    });
   

  </script>

{% endblock %}

{% block footer %} {{ include('footer.twig') }} {% endblock %}
