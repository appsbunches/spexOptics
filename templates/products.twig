    {% extends "layout.twig" %}

    {% block header %} {{ include('header.twig') }} {% endblock %}
    {% block top_links %}
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.4.0/nouislider.min.css"
        />
    {% endblock %}
    {% block main_content %}
    <div class="d-flex justify-content-between gap-2 flex-wrap align-items-center container">
     {# breadcrumps #}
            {% embed 'breadcrumb.twig' %}
                {% block breadcrumb_items %}
                    <li class="breadcrumb-item" aria-current="page"><a href="/">{{ locals.home_title }}</a></li>
                        {% if session.lang.code == 'ar' %}
                        <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" >
                        <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                        </svg>
                    {% else %}
                        <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" class="rotateIcon">
                        <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                        </svg>
                    {% endif %}
                    <li class="breadcrumb-item active " aria-current="page">{{ locals.filters.all_Products }}</li>
                {% endblock %}
            {% endembed %}
        <div class="position-relative flex-1 text-end">
            <div class="copy-message position-absolute d-none text-end w-100" id="copyMessage">{{ locals.link_copied }}</div>
            <a href="#" onclick="copyLink(event)" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Tooltip on top">
               <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_300_39227)">
                <path d="M6 15C7.65685 15 9 13.6569 9 12C9 10.3431 7.65685 9 6 9C4.34315 9 3 10.3431 3 12C3 13.6569 4.34315 15 6 15Z" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M18 9C19.6569 9 21 7.65685 21 6C21 4.34315 19.6569 3 18 3C16.3431 3 15 4.34315 15 6C15 7.65685 16.3431 9 18 9Z" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M18 21C19.6569 21 21 19.6569 21 18C21 16.3431 19.6569 15 18 15C16.3431 15 15 16.3431 15 18C15 19.6569 16.3431 21 18 21Z" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8.69922 10.7008L15.2992 7.30078" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M8.69922 13.3008L15.2992 16.7008" stroke="#333333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </g>
                <defs>
                <clipPath id="clip0_300_39227">
                <rect width="24" height="24" fill="white"/>
                </clipPath>
                </defs>
                </svg>

            </a>
        </div>
     </div>
            
            {# small hero section #}
            {% if  settings.banners_banner_products_page_image %}        
            {% include 'smallHero.twig' with { 'image' :  settings.banners_banner_products_page_image } %}
            {% endif %}

    <div class="container allProductsPage">
    <div class="row mt-4">
        {# filters #}
        {% if products.filters|length > 0 %}  
        <div class="d-none">
            {% include 'template_for_products_attributes' with { 'async' : true } %}
        </div>
        <div class="col-md-3 filters-section">
            {# Custom FIlter #}
            <div class="poducts-filters">
                <div class="d-flex filter-by align-items-center gap-2 p-3 d-none d-md-flex">
                    <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_312_51187)">
                    <path d="M0.655273 17.0273H6.64358V18.9922H0.655273V17.0273ZM0.655273 5.05069H10.6202V7.0156H0.655273V5.05069ZM10.6202 21.0039H8.65527V15.0156H10.6202V17.0273H18.6202V18.9922H10.6202V21.0039ZM4.63188 9.0273H6.64358V15.0156H4.63188V13.0039H0.655273V11.039H4.63188V9.0273ZM18.6202 13.0039H8.65527V11.039H18.6202V13.0039ZM12.6319 9.0273V3.03899H14.6436V5.05069H18.6202V7.0156H14.6436V9.0273H12.6319Z" fill="#222222"/>
                    </g>
                    <defs>
                    <clipPath id="clip0_312_51187">
                    <rect width="18" height="24" fill="white" transform="matrix(1 0 0 -1 0.637695 24)"/>
                    </clipPath>
                    </defs>
                    </svg>

                    <h3 class="head">{{ locals.filters.filter_by }}</h3>
                </div>
                <button class="d-flex filter-by w-100 mb-4 align-items-center gap-2 p-3 d-block d-md-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#customFilterInMobile" aria-controls="offcanvasTop" >
                    <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_312_51187)">
                    <path d="M0.655273 17.0273H6.64358V18.9922H0.655273V17.0273ZM0.655273 5.05069H10.6202V7.0156H0.655273V5.05069ZM10.6202 21.0039H8.65527V15.0156H10.6202V17.0273H18.6202V18.9922H10.6202V21.0039ZM4.63188 9.0273H6.64358V15.0156H4.63188V13.0039H0.655273V11.039H4.63188V9.0273ZM18.6202 13.0039H8.65527V11.039H18.6202V13.0039ZM12.6319 9.0273V3.03899H14.6436V5.05069H18.6202V7.0156H14.6436V9.0273H12.6319Z" fill="#222222"/>
                    </g>
                    <defs>
                    <clipPath id="clip0_312_51187">
                    <rect width="18" height="24" fill="white" transform="matrix(1 0 0 -1 0.637695 24)"/>
                    </clipPath>
                    </defs>
                    </svg>

                    <h3 class="head">{{ locals.filters.filter_by }}</h3>
                </button>

                <div class="offcanvas offcanvas-top offcanvas_custom_filter" tabindex="-1" id="customFilterInMobile" aria-labelledby="offcanvasTopLabel" style="z-index:99999">
                <div style="background:#fff" class="px-4 px-md-0">
                        <button type="button" class="d-flex filter-by align-items-center gap-2 p-3  d-md-none w-100" data-bs-dismiss="offcanvas" aria-label="Close">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M7.99982 9.41403L13.6568 15.071C13.8454 15.2532 14.098 15.354 14.3602 15.3517C14.6224 15.3494 14.8732 15.2443 15.0586 15.0588C15.2441 14.8734 15.3492 14.6226 15.3515 14.3604C15.3538 14.0982 15.253 13.8456 15.0708 13.657L9.41382 8.00003L15.0708 2.34303C15.253 2.15443 15.3538 1.90182 15.3515 1.63963C15.3492 1.37743 15.2441 1.12662 15.0586 0.941209C14.8732 0.755801 14.6224 0.650632 14.3602 0.648353C14.098 0.646075 13.8454 0.746869 13.6568 0.929027L7.99982 6.58603L2.34282 0.929027C2.15337 0.751372 1.90224 0.654393 1.64255 0.65861C1.38287 0.662826 1.13502 0.767909 0.951433 0.951621C0.76785 1.13533 0.662943 1.38326 0.65891 1.64295C0.654877 1.90263 0.752034 2.1537 0.929823 2.34303L6.58582 8.00003L0.928823 13.657C0.833313 13.7493 0.757131 13.8596 0.704722 13.9816C0.652313 14.1036 0.624727 14.2348 0.623573 14.3676C0.622419 14.5004 0.647721 14.6321 0.698001 14.755C0.748282 14.8779 0.822535 14.9895 0.916428 15.0834C1.01032 15.1773 1.12197 15.2516 1.24487 15.3018C1.36777 15.3521 1.49944 15.3774 1.63222 15.3763C1.765 15.3751 1.89622 15.3475 2.01823 15.2951C2.14023 15.2427 2.25058 15.1665 2.34282 15.071L7.99982 9.41403Z" fill="black"/>
                            </svg>

                            <h3 class="head">{{ locals.filters.filter_by }}</h3>
                        </button>
                        <div class="d-flex flex-column gap-5 my-5">
                            {% for index,attribute in products.filters.attributes %}
                            {% if attribute.name == "colors" or  attribute.name == "الألوان" %}
                                <div class="custom-attribute-group">
                                    <div class="d-flex justify-content-between align-items-center">
                                            <button class="nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                                    <div class="d-flex align-items-center gap-2">
                                                        <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                            <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                        </svg>
                                                        <span class"attribute-name">{{ attribute.name }}</span>
                                                    </div>
                                                </button>
                                                <button type="button" class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>

                                        </div>
                                        <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                            <div class="d-flex flex-wrap gap-3">                      
                                            {% for attr in attribute.data %}
                                            <div class="attribute color-attribute"  style="background-color:{{ attr.type_value }}" data-atributeValue="{{ attr.value }}"></div>
                                            {% endfor %}
                                            </div>
                                        </div>
                                </div>
                            {% elseif attribute.name == "sizes" or  attribute.name == "القياسات" %}
                                <div class="custom-attribute-group">
                                    <div class="d-flex justify-content-between align-items-center">
                                            <button class="nav-link  d-flex align-items-center justify-content-between gap-3" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                                    <div class="d-flex align-items-center gap-2">
                                                        <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                            <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                        </svg>
                                                        <span class"attribute-name">{{ attribute.name }}</span>
                                                    </div>
                                            </button>
                                            <button   type="button"  class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>
                                        </div>
                                        <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                            <div class="d-flex flex-wrap gap-3 con-attibute-values">                      
                                            {% for attr in attribute.data %}
                                            <div class="attribute size-attribute"   data-atributeValue="{{ attr.value }}">{{ attr.value }}</div>
                                            {% endfor %}
                                            </div>
                                        </div>
                                    </div>
                                {% else %}
                                <div class="custom-attribute-group">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                                <div class="d-flex align-items-center gap-2">
                                                    <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                        <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                    </svg>
                                                    <span class"attribute-name">{{ attribute.name }}</span>
                                                </div>
                                        </button>
                                        <button  type="button" class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>
                                    </div>
                                        <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                            <div class="d-flex flex-column gap-3">                      
                                            {% for attr in attribute.data %}
                                            <div class="d-flex align-items-center gap-3 attribute-checkboxCon">
                                                <input class=" attribute-checkbox pointer" type="checkbox"  id="{{ attr.id }}" data-atributeValue="{{ attr.value }}" name="{{ attribute.name  }}"  value="{{ attr.value }}" />
                                                <label for="{{ attr.id }}" class="form-label m-0 pointer">{{ attr.value }}</label>
                                            </div>
                                            {% endfor %}
                                            </div>
                                        </div>
                                    </div>
                            {% endif %}
                            {% endfor %}
                        </div>     
                        {# products brands  #}
                        <div class="products-brands-con">
                            <div class="d-flex align-items-center justify-content-between gap-3">
                            <button class="w-100 nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#products-brands" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                            <div class="d-flex align-items-center gap-2">
                                                <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                    <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                </svg>
                                                <span class"attribute-name">{{ locals.filters.brands }}</span>
                                            </div>
                            </button>
                            <a href="/products" class="text-nowrap try_filter_brands">{{ locals.filters.try_filter }}</a>
                            </div>
                            <div class="collapse show mt-3" id="products-brands">       
                                    <div class="products-brands d-flex flex-wrap gap-3 ">
                                    
                                    </div>
                            </div>
                        </div>
                        {# products brands  #}
                        {# renge slider #}
                        <div class="rengeSLiderCon my-5">
                            <div class="d-flex justify-content-between gap-3">
                            <button class="w-100 nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                    <div class="d-flex align-items-center gap-2">
                                        <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                            <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                        <span class"attribute-name">{{ locals.filters.price }}</span>
                                    </div>
                                </button>
                            <button type="button" class="tryFilterRenge text-nowrap">{{ locals.filters.try_filter }}</button>
                            </div>
                            <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                <div id="sliderRenge" class="mt-3"></div>
                                <div class="d-flex gap-2 mt-3">
                                    <input type="number" class="form-control text-center" id="inputRengeLower">
                                    <input type="number" class="form-control text-center" id="inputRengeUpper">
                                </div>
                            </div>
                        </div>
                        {# renge slider #}
                </div>

                </div>
            </div>
            {# Custom FIlter #}



        </div>
        {% endif %}
        {# products with sorting #}
        <div
        class="{% if products.filters|length > 0 %}col-md-9{% else %}col-12{% endif %}"
        >
        {% if products.filters|length > 0 %}
            {% include 'sorting-filter.twig' %}
        {% endif %}
        <div class="resCustomProductList w-100 d-flex justify-content-center">
                <div id="products-list" class="custom_products_list w-100">
                    {% for product in products.data %}
                            {% include 'product-card.twig' with {'product' : product, 'index': key}
                            %}
                        {% endfor %}
                
                </div>
            </div>
            <div class="loading_more_products d-flex justify-content-center mb-4 d-none w-100">
                    <svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M15.4 22.4C16.1426 22.4 16.8548 22.695 17.3799 23.2201C17.905 23.7452 18.2 24.4574 18.2 25.2C18.2 25.9426 17.905 26.6548 17.3799 27.1799C16.8548 27.705 16.1426 28 15.4 28C14.6574 28 13.9452 27.705 13.4201 27.1799C12.895 26.6548 12.6 25.9426 12.6 25.2C12.6 24.4574 12.895 23.7452 13.4201 23.2201C13.9452 22.695 14.6574 22.4 15.4 22.4ZM6.6374 18.2C7.56566 18.2 8.4559 18.5687 9.11227 19.2251C9.76865 19.8815 10.1374 20.7717 10.1374 21.7C10.1374 22.6283 9.76865 23.5185 9.11227 24.1749C8.4559 24.8313 7.56566 25.2 6.6374 25.2C5.70914 25.2 4.8189 24.8313 4.16253 24.1749C3.50615 23.5185 3.1374 22.6283 3.1374 21.7C3.1374 20.7717 3.50615 19.8815 4.16253 19.2251C4.8189 18.5687 5.70914 18.2 6.6374 18.2ZM22.8466 18.9C23.5892 18.9 24.3014 19.195 24.8265 19.7201C25.3516 20.2452 25.6466 20.9574 25.6466 21.7C25.6466 22.4426 25.3516 23.1548 24.8265 23.6799C24.3014 24.205 23.5892 24.5 22.8466 24.5C22.104 24.5 21.3918 24.205 20.8667 23.6799C20.3416 23.1548 20.0466 22.4426 20.0466 21.7C20.0466 20.9574 20.3416 20.2452 20.8667 19.7201C21.3918 19.195 22.104 18.9 22.8466 18.9ZM25.9 13.0466C26.457 13.0466 26.9911 13.2678 27.3849 13.6617C27.7787 14.0555 28 14.5896 28 15.1466C28 15.7036 27.7787 16.2377 27.3849 16.6315C26.9911 17.0254 26.457 17.2466 25.9 17.2466C25.343 17.2466 24.8089 17.0254 24.4151 16.6315C24.0212 16.2377 23.8 15.7036 23.8 15.1466C23.8 14.5896 24.0212 14.0555 24.4151 13.6617C24.8089 13.2678 25.343 13.0466 25.9 13.0466ZM3.5 8.4C4.42826 8.4 5.3185 8.76875 5.97487 9.42513C6.63125 10.0815 7 10.9717 7 11.9C7 12.8283 6.63125 13.7185 5.97487 14.3749C5.3185 15.0313 4.42826 15.4 3.5 15.4C2.57174 15.4 1.6815 15.0313 1.02513 14.3749C0.368749 13.7185 0 12.8283 0 11.9C0 10.9717 0.368749 10.0815 1.02513 9.42513C1.6815 8.76875 2.57174 8.4 3.5 8.4ZM24.9004 7.2898C25.2717 7.2898 25.6278 7.4373 25.8903 7.69985C26.1529 7.9624 26.3004 8.3185 26.3004 8.6898C26.3004 9.0611 26.1529 9.4172 25.8903 9.67975C25.6278 9.9423 25.2717 10.0898 24.9004 10.0898C24.5291 10.0898 24.173 9.9423 23.9104 9.67975C23.6479 9.4172 23.5004 9.0611 23.5004 8.6898C23.5004 8.3185 23.6479 7.9624 23.9104 7.69985C24.173 7.4373 24.5291 7.2898 24.9004 7.2898ZM11.2 0C12.3139 0 13.3822 0.442499 14.1698 1.23015C14.9575 2.0178 15.4 3.08609 15.4 4.2C15.4 5.31391 14.9575 6.3822 14.1698 7.16985C13.3822 7.9575 12.3139 8.4 11.2 8.4C10.0861 8.4 9.0178 7.9575 8.23015 7.16985C7.4425 6.3822 7 5.31391 7 4.2C7 3.08609 7.4425 2.0178 8.23015 1.23015C9.0178 0.442499 10.0861 0 11.2 0ZM21.7 4.2C21.8857 4.2 22.0637 4.27375 22.195 4.40503C22.3263 4.5363 22.4 4.71435 22.4 4.9C22.4 5.08565 22.3263 5.2637 22.195 5.39497C22.0637 5.52625 21.8857 5.6 21.7 5.6C21.5143 5.6 21.3363 5.52625 21.205 5.39497C21.0737 5.2637 21 5.08565 21 4.9C21 4.71435 21.0737 4.5363 21.205 4.40503C21.3363 4.27375 21.5143 4.2 21.7 4.2Z" fill="#0A3254"/>
                        </svg>
                    </div>
            </div>
    </div>
    </div>

        {# <div class="container d-flex flex-row">
            {% if  products.filters|length > 0 %}
                {% include 'template_for_products_attributes' with { 'async' : true } %}
            {% endif %}
            <div class="products-container flex-grow-1 pt-4">
                <div>
                    {% include 'products-filter.twig' with { 'count' : products.total, 'has_products_filtration': ( products.filters|length > 0) } %}
                </div>
                <div id="products-list" class="row products-list">
                    {% for product in products.data %}

                        <div class="prod-col {% if products.filters|length > 0 %}prod-col-attr{% endif %} prod-col-tb">
                            {% include 'product-card.twig' with {'product' : product, 'index': key} %}
                        </div>

                    {% endfor %}
                </div>
            </div>
        </div>

        {% include 'pagination.twig' with { 'totalPages' : products.last_page , 'currentPage' : products.current_page } %} #}

    {% endblock %}

    {% block footer %} {{ include('footer.twig') }} {% endblock %}

    {% block footer_scripts %}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.4.0/nouislider.min.js"></script>

        <script>

        console.log({{ products | json_encode() | raw }});
        console.log({{ products.data | json_encode() | raw }});

        const form = document.querySelector('.products-filters-attribute-form');
        
        // handle attribute values    
        const customAttribute = document.querySelectorAll('.attibute-values .attribute');
        customAttribute.forEach(element => {
            element.addEventListener('click', () => {
                const attributeValue = element.getAttribute('data-atributeValue');
                // colorAttributes.forEach((att)=>att.classList.remove("active"));
                element.classList.add("active");
                // update in main attribute values
                const myInput = form.querySelector(`input[value="${attributeValue}"]`);
                if(myInput){
                if(!myInput.checked){
                    myInput.click();
                }
                }
            });
        });
        const attributeCheckbox = document.querySelectorAll('.attibute-values .attribute-checkbox');
        attributeCheckbox.forEach(element => {
            element.addEventListener('click', () => {
                const attributeValue = element.getAttribute('data-atributeValue');
                // update in main attribute values
                const myInput = form.querySelector(`input[value="${attributeValue}"]`);
                if(myInput){
                    myInput.click();
                
                }
            });
        });
        // handle attribute values

        // handle offcanffas inside mobile
        function handleOffcanvas() {
            const offcanvasElement = document.getElementById('customFilterInMobile');
            if (window.innerWidth >= 768) {
                offcanvasElement.classList.remove('offcanvas', 'offcanvas-top');
            } else {
                offcanvasElement.classList.add('offcanvas', 'offcanvas-top');
            }
        }

        handleOffcanvas();

        window.addEventListener('resize', handleOffcanvas);
        // handle offcanffas inside mobile

        
        // handle show columns
        document.querySelectorAll('.sorting .btn-show').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.btn-show').forEach(btn => btn.classList.remove('selected'));
                button.classList.add('selected');
                if(button.classList.contains("two")) {
                document.getElementById("products-list").classList.add('two');
                }else{
                    document.getElementById("products-list").classList.remove('two');
                }
            });
        });
        // handle show columns

        // Handle Try filter
        const allTryFilter = document.querySelectorAll('.poducts-filters .try_filter_section');
        allTryFilter.forEach(element => {
            element.addEventListener('click', () => {
                const attributeName = element.getAttribute('data-attributeName');
                const elements = form.querySelectorAll('.attribute-name');
                const targetElement = Array.from(elements).find(element => element.textContent.trim() === attributeName.trim());
                const parent = targetElement.closest(".attribute-group");
                const allInputs = parent.querySelectorAll("input");
                allInputs.forEach((input) => {
                    if(input){
                            if(input.checked){
                                input.click();
                            }
                    }
                });
                // update in main Custom attribute values
                const parentCustomAttributeName = element.closest(".custom-attribute-group");
                const allInputsCustomAttribute = parentCustomAttributeName.querySelectorAll("input");
                const allCustomAttribute = parentCustomAttributeName.querySelectorAll(".attribute");
                if(allCustomAttribute.length > 0){
                    allCustomAttribute.forEach((att)=>att.classList.remove("active"));
                }
                if(allInputsCustomAttribute.length > 0){
                    allInputsCustomAttribute.forEach((input) => {
                        if(input){
                            if(input.checked){
                                input.checked = false;
                            }
                    }
                    });
                }
                current_page = 2;            
            });
        });
        // Handle Try filter
        
        //  fetchBrands();
        function getCategoryIdFromUrl() {
            const url = window.location.href;
            const regex = /\/categories\/(\d+)/;
            const match = url.match(regex);
            return match ? match[1] : null;
        }
        function fetchBrands (){
        zid.store.product.fetchCategories().then((data)=>{
            const fetchBrand = data.data.categories.find((cat)=> cat.id == 1104866 || cat.name == "brand");
            const brandTag = document.querySelector(".poducts-filters .products-brands");
            const categoryId = getCategoryIdFromUrl();
            let tempBrands = '';
            if(fetchBrand){
            fetchBrand.sub_categories.forEach((brand)=>{
                const isActive = brand.id === categoryId ? "active" : "";

                tempBrands += `<a class="d-flex justify-content-center align-items-center brand p-3 ${isActive}" href="${brand.url}">
                        ${brand.name}                    
                </a>`
            })
            }
            brandTag.innerHTML = tempBrands;
            
        }).catch((error)=>{
            console.log(error);
        })
        }



        let currentPage = 2;
        const lastPage = {{ products.last_page | json_encode() | raw }}
        const store = {{ store | json_encode() | raw  }};
        const locals = {{ locals | json_encode() | raw}};
        
        // check for product attribute 
        function getAttributeValues(url) {
                let urlObj = new URL(url);
                // Get all query parameters
                let params = new URLSearchParams(urlObj.search);

                // Retrieve all values for the 'attribute_values[]' key
                let attributeValuesFromSearch = params.getAll('attribute_values[]');
                return attributeValuesFromSearch;
        }
            window.addEventListener('popstate', getAttributeValues(window.location.href));
            window.addEventListener('hashchange', getAttributeValues(window.location.href));
    

        function getSortAndOrderParams(url, key) {
                const urlObj = new URL(url);
                const searchParams = new URLSearchParams(urlObj.search);
                return searchParams.get(key);
        }
        function getQueryParamValueMoreProdyuts(url, paramName) {
                const urlObj = new URL(url);
                const params = new URLSearchParams(urlObj.search);
                const values = params.getAll(paramName);
                const tmepVal = values[0];
            return tmepVal;
        }

        window.addEventListener('scroll', function() {

            if (window.scrollY + window.innerHeight >= document.documentElement.scrollHeight) {
                if (currentPage <= lastPage) {
                    document.querySelector(".loading_more_products").classList.remove("d-none");
                    const query = {};
                    const attributeValues = getAttributeValues(window.location.href);
                    const fromPrice = getQueryParamValueMoreProdyuts(window.location.href, 'from_price');
                    const toPrice = getQueryParamValueMoreProdyuts(window.location.href, 'to_price');
                    const sortBy = getSortAndOrderParams(window.location.href, 'sort_by');
                    const order = getSortAndOrderParams(window.location.href, 'order');

                    if (attributeValues.length > 0) {
                        query.attribute_values = attributeValues;
                    }
                    if (fromPrice) {
                        query.from_price = fromPrice;
                    }
                    if (toPrice) {
                        query.to_price = toPrice;
                    }
                    if (sortBy) {
                        query.sort_by = sortBy;
                    }
                    if (order) {
                        query.order = order;
                    }

                    query.page = currentPage;
                    console.log(query);

                    fetchMoreProducts(query);
                }

            }
        });

        function addProducts(products) {
        const productsList = document.getElementById('products-list');
        let allProds = '';

        products.data.forEach((product) => {
            allProds += `
                <div class="product-item ${!product.is_infinite && product.quantity <= 0 ? 'product-item-out-of-stock' : ''}">
                    <div class="d-flex flex-column justify-content-start">
                        <a class="box-1-1" href="/products/${product.slug}">
                            <div class="content">
                                <div class="d-flex justify-content-center" style="width: 100%; height: 100%;">
                                    ${product.badge ? includeTemplateForProductBadge() : ''}
                                    <img id="product-card-img-${product.id}"
                                        src="${product.images ? product.images[0]?.image?.large : '/path/to/default/product-img.svg'}"
                                        alt="${product.name}">
                                    <span class="product-card-bundle-offer" data-bundle-offer-product-id="${product.id}"></span>
                                </div>
                            </div>
                        </a>

                        ${product.has_options ? `
                        <div class="mt-3 d-flex flex-wrap gap-3 color-boxCon">
                            ${product.attributes.map(attr => attr.name === 'colors' || attr.name === 'الألوان' ? `
                                <div class="color-box" style="background-color:${attr.type_value}" data-colorProductCard="${attr.value}" data-productId="${product.id}"></div>
                            ` : '').join('')}
                        </div>
                        ` : ''}

                        <a href="/products/${product.slug}" class="product-title" style="margin-top: 15px"><span>${product.name}</span></a>

                        <a href="/products/${product.slug}" class="product-crd-spec">
                            ${product.formatted_sale_price ? `
                            <div class="section-product-price d-flex justify-content-between flex-wrap gap-2">
                                <div class="product-price theme-title-primary">
                                    <span class="product-prev-price">${product.formatted_price}</span>
                                    <span class="product-price">${product.formatted_sale_price}</span>
                                </div>
                                <div class="discount_percentage" style="color: #494949">
                                    <span class="sp">
                                    &nbsp;  &nbsp;${locals.product_discount}&nbsp;${product.discount_percentage}%
                                    </span>
                                </div>
                            </div>
                            ` : `
                            <div class="product-price section-product-price theme-title-primary"><span>${product.formatted_price}</span></div>
                            `}
                            ${!product.is_infinite && product.quantity <= 0 ? `
                            <small style="font-size: 1.1rem; white-space: break-spaces">${locals.lbl_error_product_out_of_stock}</small>
                            ` : ''}
                        </a>
                    </div>
                </div>
                    `;
                });

                productsList.insertAdjacentHTML('beforeend', allProds);

            }

            function fetchMoreProducts (query){
                zid.store.product.fetchAll(null, query)
                    .then(function (response) {
                    currentPage++;
                    
                    addProducts (response.data.products);
                    document.querySelector(".loading_more_products").classList.add("d-none");

                    

                    }).catch(function (error){
                        console.log(error);
                                            document.querySelector(".loading_more_products").classList.add("d-none");

                    })
            }

            window.onProductAttributesTriggered = function(){
                $('#products-list').css('opacity', '0.4');
                $('#product-pagination').css('opacity', '0');
            }

            window.onProductAttributesChanged = function(htmlStr){
                currentPage = 2;
                $('#products-list').css('opacity', '1');

                var html = $.parseHTML( htmlStr );
            
                $('#products-list').html($('#products-list', html).html());


            }

            {% if  products.data|length > 0 %}
            document.addEventListener("DOMContentLoaded", function(){
            
                var productsObj = {{ products.data | json_encode() | raw }}
                    window.sendGaProductsViewItemsListEvent('all_products', productsObj);
            });
            {% endif %}

        // handle price
        const slider = document.getElementById('sliderRenge');
        const fromPrice = form.querySelector('input[name="from_price"]');
        const toPrice = form.querySelector('input[name="to_price"]');
        const btnMakeSybmitToMainForm = form.querySelector('.highlight-button');
        const lastFromPrice = getLastQueryParamValue(window.location.href, 'from_price');
        const lastToPrice = getLastQueryParamValue(window.location.href, 'to_price');
        const input_Renge_Lower = document.getElementById('inputRengeLower');
        const input_Renge_Upper = document.getElementById('inputRengeUpper');
        
        function getLastQueryParamValue(url, paramName) {
                const urlObj = new URL(url);
                const params = new URLSearchParams(urlObj.search);
                const values = params.getAll(paramName);
                const tmepVal = values[0];
                if (tmepVal) {
                    return tmepVal;
                }else if(paramName === 'to_price') {
                    return 4000;
                }else{
                    return 0;
                }
        }

        noUiSlider.create(slider, {
            start: [lastFromPrice, lastToPrice],
            connect: true,
            range: {
            min: 0,
            max: 4000,
            },
            direction: window.appDirection,
        });
        input_Renge_Lower.value = lastFromPrice;
        input_Renge_Upper.value = lastToPrice;


        
        const formThatSubmit = document.getElementById('attribute_form');
    
        slider.noUiSlider.on('update', (values, handle) => {
            if (handle === 0) {
            input_Renge_Lower.value =  Math.round(values[0]);
            } else {
            input_Renge_Upper.value =  Math.round(values[1]);
            }   
            const lower = Math.round(values[0]);
            const upper = Math.round(values[1]);
            fromPrice.value = lower;
            toPrice.value = upper;

        });
        slider.noUiSlider.on('change', (values, handle) => {
            formThatSubmit.submit();
        });
        input_Renge_Upper.addEventListener('change', function () {
            slider.noUiSlider.set([null, this.value]);
            formThatSubmit.submit();

        });
        input_Renge_Lower.addEventListener('change', function () {
            slider.noUiSlider.set([this.value,null]);
            formThatSubmit.submit();

        });
            
        document.querySelector(".rengeSLiderCon .tryFilterRenge").addEventListener('click', function () { // this make tru filter to renge slider
            slider.noUiSlider.set([0,4000]);
            formThatSubmit.submit();
        });
    
        //   handle price

    
        // handle colors of product card
        // Attach event listener to a parent element that exists on page load
        document.querySelector(".custom_products_list").addEventListener("click", function(event) {
            // Check if the clicked element is a .color-box
            if (event.target.matches(".color-box")) {
                const box = event.target;
                console.log(box);

                const closestColorBox = box.closest(".color-boxCon");
                closestColorBox.querySelectorAll("div").forEach(colorButton => colorButton.classList.remove("active"));
                box.classList.add("active");

                const idProduct = box.getAttribute("data-productId");
                const clickedColor = box.getAttribute("data-colorProductCard");

                // Fetch product details
                zid.store.product.fetch(idProduct).then(res => {
                    const variants = res.data.product.variants;
                    const foundedProductColor = variants.find(variant => {
                        return variant.name.split("-")[1].trim().toLowerCase() === clickedColor.trim().toLowerCase();
                    });

                    // Update product details
                    const getProductCard = box.closest(".product-item");
                    const productCardImage = getProductCard.querySelector("#product-card-img-" + idProduct);
                    const productTitle = getProductCard.querySelector(".product-title");
                    const productPrevPrice = getProductCard.querySelector(".product-prev-price");
                    const productPrice = getProductCard.querySelector(".product-price");
                    const productDiscountPercentage = getProductCard.querySelector(".discount_percentage .sp");
                    const productPriceWithoutDiscount = getProductCard.querySelector(".section-product-price");

                    productTitle.textContent = foundedProductColor.name;
                    if (foundedProductColor.images) {
                        productCardImage.src = foundedProductColor.images[0]['image']['large'];
                    }
                    if (productDiscountPercentage?.formatted_sale_price) {
                        productPrice.textContent = foundedProductColor.formatted_sale_price;
                        productPrevPrice.textContent = foundedProductColor.formatted_price;
                        productDiscountPercentage.textContent = `{{ locals.product_discount }} ${foundedProductColor.discount_percentage}`;
                    } else {
                        productPriceWithoutDiscount.textContent = foundedProductColor.formatted_price;
                    }
                }).catch(error => {
                    console.log(error);
                });
            }
        });
        </script>
    {% endblock %}
