{% extends "layout.twig" %}

{% block header %} {{ include('header.twig') }} {% endblock %}
{% block top_links %}
<link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.4.0/nouislider.min.css"
    />
{% endblock %}
{% block main_content %}
         {# breadcrumps #}
        {% embed 'breadcrumb.twig' %}
            {% block breadcrumb_items %}
                <li class="breadcrumb-item" aria-current="page"><a href="/">{{ locals.home_title }}</a></li>
                    {% if session.lang.code == 'ar' %}
                    <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" >
                    <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                    </svg>
                {% else %}
                    <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg" class="rotateIcon">
                    <path d="M7 1L2 6L7 11" stroke="#333333" stroke-width="1.5"/>
                    </svg>
                {% endif %}
                <li class="breadcrumb-item active " aria-current="page">{{ locals.filters.all_Products }}</li>
            {% endblock %}
        {% endembed %}
        {# small hero section #}
        {% if  settings.banners_banner_products_page_image %}        
          {% include 'smallHero.twig' with { 'image' :  settings.banners_banner_products_page_image } %}
        {% endif %}

<div class="container allProductsPage">
  <div class="row mt-4">
    {# filters #}
     {% if products.filters|length > 0 %}  
    <div class="d-none">
        {% include 'template_for_products_attributes' with { 'async' : true } %}
    </div>
    <div class="col-md-3 filters-section">
        {# Custom FIlter #}
         <div class="poducts-filters">
            <div class="d-flex filter-by align-items-center gap-2 p-3 d-none d-md-flex">
                <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_312_51187)">
                <path d="M0.655273 17.0273H6.64358V18.9922H0.655273V17.0273ZM0.655273 5.05069H10.6202V7.0156H0.655273V5.05069ZM10.6202 21.0039H8.65527V15.0156H10.6202V17.0273H18.6202V18.9922H10.6202V21.0039ZM4.63188 9.0273H6.64358V15.0156H4.63188V13.0039H0.655273V11.039H4.63188V9.0273ZM18.6202 13.0039H8.65527V11.039H18.6202V13.0039ZM12.6319 9.0273V3.03899H14.6436V5.05069H18.6202V7.0156H14.6436V9.0273H12.6319Z" fill="#222222"/>
                </g>
                <defs>
                <clipPath id="clip0_312_51187">
                <rect width="18" height="24" fill="white" transform="matrix(1 0 0 -1 0.637695 24)"/>
                </clipPath>
                </defs>
                </svg>

                <h3 class="head">{{ locals.filters.filter_by }}</h3>
            </div>
            <button class="d-flex filter-by w-100 mb-4 align-items-center gap-2 p-3 d-block d-md-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#customFilterInMobile" aria-controls="offcanvasTop" >
                <svg width="19" height="24" viewBox="0 0 19 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_312_51187)">
                <path d="M0.655273 17.0273H6.64358V18.9922H0.655273V17.0273ZM0.655273 5.05069H10.6202V7.0156H0.655273V5.05069ZM10.6202 21.0039H8.65527V15.0156H10.6202V17.0273H18.6202V18.9922H10.6202V21.0039ZM4.63188 9.0273H6.64358V15.0156H4.63188V13.0039H0.655273V11.039H4.63188V9.0273ZM18.6202 13.0039H8.65527V11.039H18.6202V13.0039ZM12.6319 9.0273V3.03899H14.6436V5.05069H18.6202V7.0156H14.6436V9.0273H12.6319Z" fill="#222222"/>
                </g>
                <defs>
                <clipPath id="clip0_312_51187">
                <rect width="18" height="24" fill="white" transform="matrix(1 0 0 -1 0.637695 24)"/>
                </clipPath>
                </defs>
                </svg>

                <h3 class="head">{{ locals.filters.filter_by }}</h3>
            </button>

            <div class="offcanvas offcanvas-top offcanvas_custom_filter" tabindex="-1" id="customFilterInMobile" aria-labelledby="offcanvasTopLabel" style="z-index:99999">
               <div style="background:#fff" class="px-4 px-md-0">
                    <button type="button" class="d-flex filter-by align-items-center gap-2 p-3  d-md-none w-100" data-bs-dismiss="offcanvas" aria-label="Close">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M7.99982 9.41403L13.6568 15.071C13.8454 15.2532 14.098 15.354 14.3602 15.3517C14.6224 15.3494 14.8732 15.2443 15.0586 15.0588C15.2441 14.8734 15.3492 14.6226 15.3515 14.3604C15.3538 14.0982 15.253 13.8456 15.0708 13.657L9.41382 8.00003L15.0708 2.34303C15.253 2.15443 15.3538 1.90182 15.3515 1.63963C15.3492 1.37743 15.2441 1.12662 15.0586 0.941209C14.8732 0.755801 14.6224 0.650632 14.3602 0.648353C14.098 0.646075 13.8454 0.746869 13.6568 0.929027L7.99982 6.58603L2.34282 0.929027C2.15337 0.751372 1.90224 0.654393 1.64255 0.65861C1.38287 0.662826 1.13502 0.767909 0.951433 0.951621C0.76785 1.13533 0.662943 1.38326 0.65891 1.64295C0.654877 1.90263 0.752034 2.1537 0.929823 2.34303L6.58582 8.00003L0.928823 13.657C0.833313 13.7493 0.757131 13.8596 0.704722 13.9816C0.652313 14.1036 0.624727 14.2348 0.623573 14.3676C0.622419 14.5004 0.647721 14.6321 0.698001 14.755C0.748282 14.8779 0.822535 14.9895 0.916428 15.0834C1.01032 15.1773 1.12197 15.2516 1.24487 15.3018C1.36777 15.3521 1.49944 15.3774 1.63222 15.3763C1.765 15.3751 1.89622 15.3475 2.01823 15.2951C2.14023 15.2427 2.25058 15.1665 2.34282 15.071L7.99982 9.41403Z" fill="black"/>
                        </svg>

                        <h3 class="head">{{ locals.filters.filter_by }}</h3>
                    </button>
                    <div class="d-flex flex-column gap-5 my-5">
                        {% for index,attribute in products.filters.attributes %}
                        {% if attribute.name == "colors" or  attribute.name == "الألوان" %}
                            <div class="custom-attribute-group">
                                <div class="d-flex justify-content-between align-items-center">
                                        <button class="nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                                <div class="d-flex align-items-center gap-2">
                                                    <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                        <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                    </svg>
                                                    <span class"attribute-name">{{ attribute.name }}</span>
                                                </div>
                                            </button>
                                            <button type="button" class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>

                                    </div>
                                    <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                        <div class="d-flex flex-wrap gap-3">                      
                                        {% for attr in attribute.data %}
                                        <div class="attribute color-attribute"  style="background-color:{{ attr.type_value }}" data-atributeValue="{{ attr.value }}"></div>
                                        {% endfor %}
                                        </div>
                                    </div>
                            </div>
                        {% elseif attribute.name == "sizes" or  attribute.name == "القياسات" %}
                            <div class="custom-attribute-group">
                                <div class="d-flex justify-content-between align-items-center">
                                        <button class="nav-link  d-flex align-items-center justify-content-between gap-3" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                                <div class="d-flex align-items-center gap-2">
                                                    <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                        <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                    </svg>
                                                    <span class"attribute-name">{{ attribute.name }}</span>
                                                </div>
                                        </button>
                                        <button   type="button"  class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>
                                    </div>
                                    <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                        <div class="d-flex flex-wrap gap-3 con-attibute-values">                      
                                        {% for attr in attribute.data %}
                                        <div class="attribute size-attribute"   data-atributeValue="{{ attr.value }}">{{ attr.value }}</div>
                                        {% endfor %}
                                        </div>
                                    </div>
                                </div>
                            {% else %}
                            <div class="custom-attribute-group">
                                <div class="d-flex justify-content-between align-items-center">
                                    <button class="nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                            <div class="d-flex align-items-center gap-2">
                                                <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                    <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                                </svg>
                                                <span class"attribute-name">{{ attribute.name }}</span>
                                            </div>
                                    </button>
                                    <button  type="button" class="try_filter_section " data-attributeName="{{ attribute.name }}">{{ locals.filters.try_filter }}</button>
                                </div>
                                    <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                                        <div class="d-flex flex-column gap-3">                      
                                        {% for attr in attribute.data %}
                                        <div class="d-flex align-items-center gap-3 attribute-checkboxCon">
                                            <input class=" attribute-checkbox pointer" type="checkbox"  id="{{ attr.id }}" data-atributeValue="{{ attr.value }}" name="{{ attribute.name  }}"  value="{{ attr.value }}" />
                                            <label for="{{ attr.id }}" class="form-label m-0 pointer">{{ attr.value }}</label>
                                        </div>
                                        {% endfor %}
                                        </div>
                                    </div>
                                </div>
                        {% endif %}
                        {% endfor %}
                    </div>     
                    {# products brands  #}
                    <div class="products-brands-con">
                        <div class="d-flex align-items-center justify-content-between gap-3">
                        <button class="w-100 nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#products-brands" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                        <div class="d-flex align-items-center gap-2">
                                            <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                                <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                            </svg>
                                            <span class"attribute-name">{{ locals.filters.brands }}</span>
                                        </div>
                        </button>
                        <a href="/products" class="text-nowrap try_filter_brands">{{ locals.filters.try_filter }}</a>
                        </div>
                        <div class="collapse show mt-3" id="products-brands">       
                                <div class="products-brands d-flex flex-wrap gap-3 ">
                                
                                </div>
                        </div>
                    </div>
                    {# products brands  #}
                    {# renge slider #}
                    <div class="rengeSLiderCon my-5">
                        <div class="d-flex justify-content-between gap-3">
                        <button class="w-100 nav-link  d-flex align-items-center justify-content-between gap-3" type="button" href="#collapse{{ index }}" data-bs-toggle="collapse" aria-expanded="false" aria-controls="collapseExample">
                                <div class="d-flex align-items-center gap-2">
                                    <svg width="7" height="13" viewBox="0 0 7 13" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrowCollapse rotate">
                                        <path d="M6.25 11.959L1 6.70898L6.25 1.45898" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                    <span class"attribute-name">{{ locals.filters.price }}</span>
                                </div>
                            </button>
                        <button type="button" class="tryFilterRenge text-nowrap">{{ locals.filters.try_filter }}</button>
                        </div>
                        <div class="collapse show attibute-values mt-3" id="collapse{{ index }}">
                            <div id="sliderRenge" class="mt-3"></div>
                            <div class="d-flex gap-2 mt-3">
                                <input type="number" class="form-control text-center" id="inputRengeLower">
                                <input type="number" class="form-control text-center" id="inputRengeUpper">
                            </div>
                        </div>
                    </div>
                    {# renge slider #}
               </div>

            </div>
         </div>
        {# Custom FIlter #}



    </div>
    {% endif %}
    {# products with sorting #}
    <div
      class="{% if products.filters|length > 0 %}col-md-9{% else %}col-12{% endif %}"
    >
     {% if products.filters|length > 0 %}
         {% include 'sorting-filter.twig' %}
     {% endif %}
      <div id="products-list" class="custom_products_list">
      {% for product in products.data %}
        {% include 'product-card.twig' with {'product' : product, 'index': key}
        %}
      {% endfor %}
    </div>
    </div>
  </div>
</div>

     {# <div class="container d-flex flex-row">
        {% if  products.filters|length > 0 %}
            {% include 'template_for_products_attributes' with { 'async' : true } %}
        {% endif %}
        <div class="products-container flex-grow-1 pt-4">
            <div>
                {% include 'products-filter.twig' with { 'count' : products.total, 'has_products_filtration': ( products.filters|length > 0) } %}
            </div>
            <div id="products-list" class="row products-list">
                {% for product in products.data %}

                    <div class="prod-col {% if products.filters|length > 0 %}prod-col-attr{% endif %} prod-col-tb">
                        {% include 'product-card.twig' with {'product' : product, 'index': key} %}
                    </div>

                {% endfor %}
            </div>
        </div>
    </div>

    {% include 'pagination.twig' with { 'totalPages' : products.last_page , 'currentPage' : products.current_page } %} #}

{% endblock %}

{% block footer %} {{ include('footer.twig') }} {% endblock %}

{% block footer_scripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.4.0/nouislider.min.js"></script>

    <script>

    console.log({{ products | json_encode() | raw }});
    console.log({{ products.data | json_encode() | raw }});

    const form = document.querySelector('.products-filters-attribute-form');
    
    // handle attribute values    
    const customAttribute = document.querySelectorAll('.attibute-values .attribute');
    customAttribute.forEach(element => {
        element.addEventListener('click', () => {
            const attributeValue = element.getAttribute('data-atributeValue');
            // colorAttributes.forEach((att)=>att.classList.remove("active"));
            element.classList.add("active");
            // update in main attribute values
            const myInput = form.querySelector(`input[value="${attributeValue}"]`);
            if(myInput){
               if(!myInput.checked){
                myInput.click();
               }
            }
        });
    });
    const attributeCheckbox = document.querySelectorAll('.attibute-values .attribute-checkbox');
    attributeCheckbox.forEach(element => {
        element.addEventListener('click', () => {
            const attributeValue = element.getAttribute('data-atributeValue');
            // update in main attribute values
            const myInput = form.querySelector(`input[value="${attributeValue}"]`);
            if(myInput){
                myInput.click();
               
            }
        });
    });
    // handle attribute values

    // handle offcanffas inside mobile
    function handleOffcanvas() {
        const offcanvasElement = document.getElementById('customFilterInMobile');
        if (window.innerWidth >= 768) {
            offcanvasElement.classList.remove('offcanvas', 'offcanvas-top');
        } else {
            offcanvasElement.classList.add('offcanvas', 'offcanvas-top');
        }
    }

    handleOffcanvas();

    window.addEventListener('resize', handleOffcanvas);
    // handle offcanffas inside mobile

    
    // handle show columns
    document.querySelectorAll('.sorting .btn-show').forEach(button => {
        button.addEventListener('click', () => {
            document.querySelectorAll('.btn-show').forEach(btn => btn.classList.remove('selected'));
            button.classList.add('selected');
            if(button.classList.contains("two")) {
              document.getElementById("products-list").classList.add('two');
            }else{
                document.getElementById("products-list").classList.remove('two');
            }
        });
     });
    // handle show columns

    // Handle Try filter
    const allTryFilter = document.querySelectorAll('.poducts-filters .try_filter_section');
    allTryFilter.forEach(element => {
        element.addEventListener('click', () => {
            const attributeName = element.getAttribute('data-attributeName');
            const elements = form.querySelectorAll('.attribute-name');
            const targetElement = Array.from(elements).find(element => element.textContent.trim() === attributeName.trim());
            const parent = targetElement.closest(".attribute-group");
            const allInputs = parent.querySelectorAll("input");
            allInputs.forEach((input) => {
                 if(input){
                        if(input.checked){
                            input.click();
                        }
                  }
            });
            // update in main Custom attribute values
            const parentCustomAttributeName = element.closest(".custom-attribute-group");
            const allInputsCustomAttribute = parentCustomAttributeName.querySelectorAll("input");
            const allCustomAttribute = parentCustomAttributeName.querySelectorAll(".attribute");
            if(allCustomAttribute.length > 0){
                allCustomAttribute.forEach((att)=>att.classList.remove("active"));
            }
            if(allInputsCustomAttribute.length > 0){
                allInputsCustomAttribute.forEach((input) => {
                     if(input){
                        if(input.checked){
                            input.checked = false;
                        }
                  }
                });
            }
            current_page = 2;            
        });
    });
    // Handle Try filter
    
    //  fetchBrands();
    function getCategoryIdFromUrl() {
        const url = window.location.href;
        const regex = /\/categories\/(\d+)/;
        const match = url.match(regex);
        return match ? match[1] : null;
    }
    function fetchBrands (){
    zid.store.product.fetchCategories().then((data)=>{
        // console.log(data);
        const fetchBrand = data.data.categories.find((cat)=> cat.id == 1104866 || cat.name == "brand");
        const brandTag = document.querySelector(".poducts-filters .products-brands");
        const categoryId = getCategoryIdFromUrl();
        let tempBrands = '';
        if(fetchBrand){
        fetchBrand.sub_categories.forEach((brand)=>{
            const isActive = brand.id === categoryId ? "active" : "";

            tempBrands += `<a class="d-flex justify-content-center align-items-center brand p-3 ${isActive}" href="${brand.url}">
                    ${brand.name}                    
            </a>`
        })
        }
        brandTag.innerHTML = tempBrands;
        
    }).catch((error)=>{
        console.log(error);
    })
    }



       let currentPage = 2;
       const lastPage = {{ products.last_page | json_encode() | raw }}
       const store = {{ store | json_encode() | raw  }};
       const locals = {{ locals | json_encode() | raw}};
       
      // check for product attribute 
      function getAttributeValues(url) {
            let urlObj = new URL(url);
            // Get all query parameters
            let params = new URLSearchParams(urlObj.search);

            // Retrieve all values for the 'attribute_values[]' key
            let attributeValuesFromSearch = params.getAll('attribute_values[]');
            console.log(attributeValuesFromSearch);
            return attributeValuesFromSearch;
       }
        window.addEventListener('popstate', getAttributeValues(window.location));
        window.addEventListener('hashchange', getAttributeValues(window.location));

       window.addEventListener('scroll', function(){
            if(window.scrollY + window.innerHeight >= document.documentElement.scrollHeight){
                if(currentPage <= lastPage){
                    const attibuteValues = getAttributeValues(window.location);
                    if(attibuteValues.length > 0){
                        console.log("attribute values");
                        console.log(attibuteValues);
                        fetchMoreProducts({page: currentPage,attribute_values: attibuteValues});
                        return;
                    }
                    fetchMoreProducts({page: currentPage});
                }
            }
       });

       function addProducts(products) {
            const productsList = document.getElementById('products-list');
            let allProds = '';
         
           products.data.forEach((product, index) => {
            allProds += `
        <div class="product-item ${!product.is_infinite && product.quantity <= 0 ? 'product-item-out-of-stock' : ''}">
            <a href="/products/${product.slug}" class="d-flex flex-column justify-content-start">
                <div class="box-1-1">
                    <div class="content">
                        <div class="d-flex justify-content-center" style="width: 100%; height: 100%;">
                            ${product.badge ? includeTemplateForProductBadge() : ''}
                            <img id="product-card-img-${product.id}"
                                src="${product.images[0]?.image?.large}"
                                alt="${product.name}">
                            <span class="product-card-bundle-offer" data-bundle-offer-product-id="${product.id}"></span>
                        </div>
                    </div>
                </div>
                <div class="product-title" style="margin-top: 15px"><span>${product.name}</span></div>
                ${store.is_product_reviews_enabled ? `
                <div class="product-card-rating-wrapper" style="height: 18px">
                    ${product.rating ? `
                        ${includeRatingStars(product.rating.average)}
                        <span class="product-card-rating-count">(${product.rating.total_count})</span>
                    ` : ''}
                </div>
                ` : ''}
                <div class="product-crd-spec">
                    ${product.formatted_sale_price ? `
                    <div class="section-product-price">
                        <div class="product-price theme-title-primary"><span>${product.formatted_sale_price}</span></div>
                        <div style="color: #494949">
                            <span class="product-prev-price">${product.formatted_price}</span>
                            <span style="color:#f25f5f;">
                                &nbsp;  &nbsp;${locals.product_discount}&nbsp;${product.discount_percentage}%
                            </span>
                        </div>
                    </div>
                    ` : `
                    <div class="product-price section-product-price theme-title-primary"><span>${product.formatted_price}</span></div>
                    `}
                    ${product.is_infinite || product.quantity > 0 ? `
                    ${product.has_options || product.has_fields ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.product_has_options}</small>` : ''}
                    ${!product.is_taxable ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.product_is_not_taxable}</small>` : ''}
                    ` : ''}
                    ${!product.is_infinite && product.quantity <= 0 ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.lbl_error_product_out_of_stock}</small>` : ''}
                </div>
                <div style="text-align: center">
                    ${!product.is_infinite && product.quantity <= 0 ? `
                    <a class="btn btn-primary btn-product-card-out-of-stock" disabled>${locals.lbl_error_product_out_of_stock}</a>
                    ` : (product.has_options || product.has_fields) ? `
                    <a class="btn btn-primary btn-product-card-select-variant" href="/products/${product.slug}">${locals.add_to_cart}</a>
                    ` : `
                
                    `}
                </div>
            </a>
        </div>
    `
            });
           
          productsList.insertAdjacentHTML('beforeend', allProds);
           
        }

        function fetchMoreProducts (query){
             zid.store.product.fetchAll(null, query)
                .then(function (response) {
                 currentPage++;
                 
                  addProducts (response.data.products);
                 

                }).catch(function (error){
                    console.log(error);
                })
        }

        window.onProductAttributesTriggered = function(){
            $('#products-list').css('opacity', '0.4');
            $('#product-pagination').css('opacity', '0');
        }

        window.onProductAttributesChanged = function(htmlStr){
            currentPage = 2;
            var html = $.parseHTML( htmlStr );
            $('#products-list').html($('#products-list', html).html());
            $('#products-list').css('opacity', '1');

            if($('#product-pagination', html).length>0){
                $('#product-pagination').html($('#product-pagination', html).html());
                $('#product-pagination').css('opacity', '1');
            }

        }

        {% if  products.data|length > 0 %}
        document.addEventListener("DOMContentLoaded", function(){
            var productsObj = {{ products.data | json_encode() | raw }}
                window.sendGaProductsViewItemsListEvent('all_products', productsObj);
        });
        {% endif %}

     // handle price
      const slider = document.getElementById('sliderRenge');
      const fromPrice = form.querySelector('input[name="from_price"]');
      const toPrice = form.querySelector('input[name="to_price"]');
      const btnMakeSybmitToMainForm = form.querySelector('.highlight-button');
      const lastFromPrice = getLastQueryParamValue(window.location.href, 'from_price');
      const lastToPrice = getLastQueryParamValue(window.location.href, 'to_price');
      const input_Renge_Lower = document.getElementById('inputRengeLower');
      const input_Renge_Upper = document.getElementById('inputRengeUpper');
      
      function getLastQueryParamValue(url, paramName) {
            const urlObj = new URL(url);
            const params = new URLSearchParams(urlObj.search);
            const values = params.getAll(paramName);
            const tmepVal = values[0];
            if (tmepVal) {
                return tmepVal;
            }else if(paramName === 'to_price') {
                return 4000;
            }else{
                return 0;
            }
      }

      noUiSlider.create(slider, {
        start: [lastFromPrice, lastToPrice],
        connect: true,
        range: {
          min: 0,
          max: 4000,
        },
        direction: window.appDirection,
      });
      input_Renge_Lower.value = lastFromPrice;
      input_Renge_Upper.value = lastToPrice;


    
      const formThatSubmit = document.getElementById('attribute_form');
   
      slider.noUiSlider.on('update', (values, handle) => {
         if (handle === 0) {
         input_Renge_Lower.value =  Math.round(values[0]);
        } else {
        input_Renge_Upper.value =  Math.round(values[1]);
        }   
        const lower = Math.round(values[0]);
        const upper = Math.round(values[1]);
        fromPrice.value = lower;
        toPrice.value = upper;

      });
      slider.noUiSlider.on('change', (values, handle) => {
         formThatSubmit.submit();
      });
      input_Renge_Upper.addEventListener('change', function () {
         slider.noUiSlider.set([null, this.value]);
         formThatSubmit.submit();

       });
      input_Renge_Lower.addEventListener('change', function () {
         slider.noUiSlider.set([this.value,null]);
         formThatSubmit.submit();

       });
          
      document.querySelector(".rengeSLiderCon .tryFilterRenge").addEventListener('click', function () { // this make tru filter to renge slider
         slider.noUiSlider.set([0,4000]);
         formThatSubmit.submit();
       });
   
    //   handle price

 


    </script>
{% endblock %}
