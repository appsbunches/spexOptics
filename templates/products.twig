{% extends "layout.twig" %}

{% block header %} {{ include('header.twig') }} {% endblock %}

{% block main_content %}


    <section class="breadcrumb-section">
        <nav aria-label="breadcrumb">

            <ol class="breadcrumb">
            <div class="container d-flex flex-wrap">
                <li class="breadcrumb-item" aria-current="page"><a href="/">{{ locals.home_title }}</a></li>
                <li class="breadcrumb-item active " aria-current="page">{{ locals.products_title }}</li>
            </div>

            </ol>

        </nav>
    </section>

<div class="container">
  <div class="row">
    {# filters #}
     {% if products.filters|length > 0 %}
    <div class="col-md-4">
      {% include 'template_for_products_attributes' with { 'async' : true } %}
    </div>
    {% endif %}
    {# products with sorting #}
    <div
      class="{% if products.filters|length > 0 %}col-md-8{% else %}col-12{% endif %}"
    >
       <div id="products-list" class="row products-list">
      {% for product in products.data %}

    
        {% include 'product-card.twig' with {'product' : product, 'index': key}
        %}

      {% endfor %}
    </div>
    </div>
  </div>
</div>

     {# <div class="container d-flex flex-row">
        {% if  products.filters|length > 0 %}
            {% include 'template_for_products_attributes' with { 'async' : true } %}
        {% endif %}
        <div class="products-container flex-grow-1 pt-4">
            <div>
                {% include 'products-filter.twig' with { 'count' : products.total, 'has_products_filtration': ( products.filters|length > 0) } %}
            </div>
            <div id="products-list" class="row products-list">
                {% for product in products.data %}

                    <div class="prod-col {% if products.filters|length > 0 %}prod-col-attr{% endif %} prod-col-tb">
                        {% include 'product-card.twig' with {'product' : product, 'index': key} %}
                    </div>

                {% endfor %}
            </div>
        </div>
    </div>

    {% include 'pagination.twig' with { 'totalPages' : products.last_page , 'currentPage' : products.current_page } %} #}

{% endblock %}

{% block footer %} {{ include('footer.twig') }} {% endblock %}

{% block footer_scripts %}
    <script>

    console.log({{ products | json_encode() | raw }});
console.log({{ products.data | json_encode() | raw }});
   
       let currentPage = 2;
       const lastPage = {{ products.last_page | json_encode() | raw }}
       const store = {{ store | json_encode() | raw  }};
       const locals = {{ locals | json_encode() | raw}};
       
      // check for product attribute 
      function getAttributeValues(url) {
            let urlObj = new URL(url);
            // Get all query parameters
            let params = new URLSearchParams(urlObj.search);

            // Retrieve all values for the 'attribute_values[]' key
            let attributeValuesFromSearch = params.getAll('attribute_values[]');
            console.log(attributeValuesFromSearch);
            return attributeValuesFromSearch;
       }
        window.addEventListener('popstate', getAttributeValues(window.location));
        window.addEventListener('hashchange', getAttributeValues(window.location));

       window.addEventListener('scroll', function(){
            if(window.scrollY + window.innerHeight >= document.documentElement.scrollHeight){
                if(currentPage <= lastPage){
                    const attibuteValues = getAttributeValues(window.location);
                    if(attibuteValues.length > 0){
                        console.log("attribute values");
                        console.log(attibuteValues);
                        fetchMoreProducts({page: currentPage,attribute_values: attibuteValues});
                        return;
                    }
                    fetchMoreProducts({page: currentPage});
                }
            }
       });

       function addProducts(products) {
            const productsList = document.getElementById('products-list');
            let allProds = '';
         
           products.data.forEach((product, index) => {
            allProds += `
        <div class="product-item ${!product.is_infinite && product.quantity <= 0 ? 'product-item-out-of-stock' : ''}">
            <a href="/products/${product.slug}" class="d-flex flex-column justify-content-start">
                <div class="box-1-1">
                    <div class="content">
                        <div class="d-flex justify-content-center" style="width: 100%; height: 100%;">
                            ${product.badge ? includeTemplateForProductBadge() : ''}
                            <img id="product-card-img-${product.id}"
                                src="${product.images[0]?.image?.large}"
                                alt="${product.name}">
                            <span class="product-card-bundle-offer" data-bundle-offer-product-id="${product.id}"></span>
                        </div>
                    </div>
                </div>
                <div class="product-title" style="margin-top: 15px"><span>${product.name}</span></div>
                ${store.is_product_reviews_enabled ? `
                <div class="product-card-rating-wrapper" style="height: 18px">
                    ${product.rating ? `
                        ${includeRatingStars(product.rating.average)}
                        <span class="product-card-rating-count">(${product.rating.total_count})</span>
                    ` : ''}
                </div>
                ` : ''}
                <div class="product-crd-spec">
                    ${product.formatted_sale_price ? `
                    <div class="section-product-price">
                        <div class="product-price theme-title-primary"><span>${product.formatted_sale_price}</span></div>
                        <div style="color: #494949">
                            <span class="product-prev-price">${product.formatted_price}</span>
                            <span style="color:#f25f5f;">
                                &nbsp;  &nbsp;${locals.product_discount}&nbsp;${product.discount_percentage}%
                            </span>
                        </div>
                    </div>
                    ` : `
                    <div class="product-price section-product-price theme-title-primary"><span>${product.formatted_price}</span></div>
                    `}
                    ${product.is_infinite || product.quantity > 0 ? `
                    ${product.has_options || product.has_fields ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.product_has_options}</small>` : ''}
                    ${!product.is_taxable ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.product_is_not_taxable}</small>` : ''}
                    ` : ''}
                    ${!product.is_infinite && product.quantity <= 0 ? `<small style="font-size: 1.1rem; white-space: break-spaces">${locals.lbl_error_product_out_of_stock}</small>` : ''}
                </div>
                <div style="text-align: center">
                    ${!product.is_infinite && product.quantity <= 0 ? `
                    <a class="btn btn-primary btn-product-card-out-of-stock" disabled>${locals.lbl_error_product_out_of_stock}</a>
                    ` : (product.has_options || product.has_fields) ? `
                    <a class="btn btn-primary btn-product-card-select-variant" href="/products/${product.slug}">${locals.add_to_cart}</a>
                    ` : `
                
                    `}
                </div>
            </a>
        </div>
    `
            });
           
          productsList.insertAdjacentHTML('beforeend', allProds);
           
        }

        function fetchMoreProducts (query){
             zid.store.product.fetchAll(null, query)
                .then(function (response) {
                 currentPage++;
                 
                  addProducts (response.data.products);
                 

                }).catch(function (error){
                    console.log(error);
                })
        }

        window.onProductAttributesTriggered = function(){
            $('#products-list').css('opacity', '0.4');
            $('#product-pagination').css('opacity', '0');
        }

        window.onProductAttributesChanged = function(htmlStr){
            currentPage = 2;
            var html = $.parseHTML( htmlStr );
            $('#products-list').html($('#products-list', html).html());
            $('#products-list').css('opacity', '1');

            if($('#product-pagination', html).length>0){
                $('#product-pagination').html($('#product-pagination', html).html());
                $('#product-pagination').css('opacity', '1');
            }

        }

        {% if  products.data|length > 0 %}
        document.addEventListener("DOMContentLoaded", function(){
            var productsObj = {{ products.data | json_encode() | raw }}
                window.sendGaProductsViewItemsListEvent('all_products', productsObj);
        });
        {% endif %}
    </script>
{% endblock %}
